//  __________-----------================-----------__________  //
//  =====================<  NETPLAY  4  >=====================  //
//  | Проект: NetPlay Client 4                               |  //
//  | Файл: PackedData.hpp                                   |  //
//  | Автор: Fedor Buben <bubenfedor0@gmail.com>             |  //
//  | Дата создания: 02.04.2023                              |  //
//  | Дата изменения: 03.02.2024                             |  //
//  | Описание: Последовательность байт, готовая к передаче. |  //
//  |--------------------------------------------------------|  //
//  | ПОДРОБНОЕ ОПИСАНИЕ                                     |  //
//  |   Перед передачей данных их нужно преобразовать в      |  //
//  | последовательность байт. После передачи их нужно       |  //
//  | прочитать. Для этих дейтвий оптимизирован тип          |  //
//  | PackedData. С помощью него можно легко упаковать       |  //
//  | произвольные данные и распаковать их на другой стороне.|  //
//  |                                                        |  //
//  ==========================================================  //
//                                                              //

#ifndef PACKEDDATA_HPP
#define PACKEDDATA_HPP

#include <vector>
#include <string>
#include <memory>
#include <map>

namespace engine
{

/// @brief Тип, используемый для подсчета размера хранимых данных.
using DataSize = unsigned int;

/// @brief Хранит произвольные данные. Может содержать в себе
/// последовательность других объектов PackedData и быстро извлекать
/// каждый следующий с помощью метода take(). Требует контроля
/// выделенной памяти. Параметр keep_data определяет, будет ли
/// память освобождена автоматически при удалении объекта. 
class PackedData
{
public:
        /// @brief Конструирует объект без начальных данных.
        /// Устанавливает параметр ```keep_data``` на ```false```.
        /// В пакет можно будет добавть новые данные.
        PackedData();

        /// @brief Конструирует объект, не копируя данные, а используя
        /// уже выделенную память. При этом добавить новые данные будет
        /// нельзя. Устанавливает параметр ```keep_data``` на ```true```.
        /// @note Используется в методе take()
        /// @param data Указатель на начальные данные
        /// @param alloc_data Указатель на начало выделенной памяти
        /// @param size Размер начальных данных
        PackedData(char* data, char* alloc_data, DataSize size);

        /// @brief Конструирует объект, копируя данные. Устанавливает
        /// параметр ```keep_data``` на ```false```.
        /// @param data Указатель на начальные данные
        /// @param size Размер данных
        PackedData(void* data, DataSize size);

        ~PackedData();

        /// @brief Добавляет данные другого объекта PackedData.
        /// Происходит копирование данных.
        /// @param other Объект, данные которого нужно добавить
        void operator += (PackedData other);

        /// @brief Добавляет символы данной строки к хранимым данным.
        /// Происходит копирование символов строки.
        /// @note Заключающий ноль учитывается!
        /// @param string Строка, которую нужно добавить
        void operator += (std::string string);

        /// @brief Возвращает следующий пакет упакованных данных.
        /// @note Полученный пакет будет доступен только для чтения
        /// @return Пакет упакованных данных.
        PackedData take();

        /// @return Указатель на хранимые данные
        char* data();

        /// @return Указатель на начало участка выделенной памяти
        char* alloc_data();

        /// @return Размер хранимых данных
        DataSize size();

        /// @return Размер участка выделенной памяти
        DataSize alloc_size();

        /// @brief Очищает выделенную память. Другие параметры при этом
        /// не меняются.
        void clear();

        /// @brief Устанавливает значение параметра keep_data. Он определяет,
        /// будет ли память автоматически освобождена после удаления объекта.
        /// @param keep_data Новое значение параметра
        void set_keep_data(bool keep_data);

private:
        /// @brief Указатель на данные пакета
        char* m_data;

        /// @brief Указатель на начало участка выделенной памяти
        char* m_alloc_data;

        /// @brief Размер хранимых данных
        DataSize m_size;

        /// @brief Размер выделенного участка памяти
        DataSize m_alloc_size;

        /// @brief Нужно ли освобождать память после удаления объекта
        bool m_keep_data;

        /// @brief Показывет, можно ли добавлять новые данные в пакет
        bool m_readonly;
};

}

#endif
